{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","constants.js","reducers.js","index.js"],"names":["SearchBox","_ref","searchfield","searchChange","react_default","a","createElement","className","type","placeholder","onChange","Card","props","alt","src","concat","id","name","email","CardList","robots","map","user","i","components_Card","key","Scroll","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onSearchChange","event","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","Boolean","window","location","hostname","match","intialState","searchField","store","createStore","arguments","undefined","action","assign","payload","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67599b50.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\t\n\t\t\t<input \n\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype ='search' \n\t\t\t\tplaceholder='search robots' \n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Card = (props) => {\n\treturn (\t\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt=\"robots\" src={`https://robohash.org/${props.id}?200x200`}/>\n\t\t\t<div>\n\t\t\t\t<h2>{props.name}</h2>\n\t\t\t\t<p>{props.email}</p>\n\t\t\t</div>\n\t\t</div>\n\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ robots }) => {\n\t\n\treturn (\n\t\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user, i)=> {\n\t\t\t\t\treturn( \n\t\t\t\t\t\t<Card key= {i} \n\t\t\t\t\t\tid= {robots[i].id} \n\t\t\t\t\t\tname= {robots[i].name} \n\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: \n\t\t'5px soild black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError: true })\n\t}\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Ooops. That is not good</h1>\n\t\t}\n\t\treturn this.props.children \n\t}\n}\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\n\n\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response=> response.json())\n\t\t\t.then(users=> this.setState({ robots: users }));\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value})\n\t}\n\n\trender() {\n\t\tconst { robots, searchfield } = this.state;\n\t\tconst filteredRobots = robots.filter(robot =>{\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t} )\n\t\treturn !robots.length ?\n\t\t\t<h1>Loading</h1> :\n\t\t\t(\n\t\t\t<div className = 'tc'>\n\t\t\t\t<h1 className='f1'> RoboFriends</h1> \n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\n\t\t\t)\n\t\t\n\t}\n\t\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'","import { CHANGE_SEARCH_FIELD } from './constants.js';\n\n\nconst intialState = { \n\tsearchField: ''\n}\n\nexport const searchRobots = (state=intialState, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\n\t\t\tdefault:\n\t\t\t\treturn state;\n\t}\n }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots } from './reducers.js';\nimport 'tachyons';\n\nconst store = createStore(searchRobots)\n\nReactDOM.render(\n\t\t\t\t<Provider store={store}>\n\t\t\t\t\t<App  />\n\t\t\t\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}